{"version":3,"sources":["../node_modules/@firebase/analytics/dist/index.esm.js"],"names":["GtagCommand","EventName","GTAG_URL","logger","wrapOrCreateGtag","initializedIdPromisesMap","dataLayerName","gtagFunctionName","gtagCore","_args","_i","arguments","length","window","push","command","idOrNameOrParams","gtagParams","EVENT","initializationPromisesToWaitFor","gaSendToList","Array","isArray","gaSendToList_1","sendToId","initializationPromise","_a","_b","Object","values","idPromise","Promise","all","then","catch","e","error","CONFIG","resolve","SET","wrapGtag","wrappedGtag","gtagCoreFunction","wrappedGtagFunction","ERRORS","ERROR_FACTORY","gtagName","globalInitDone","settings","options","create","factory","app","installations","errorInfo","analyticsId","id","scriptTags","document","getElementsByTagName","tag","src","includes","findGtagScriptOnPage","script","createElement","async","head","appendChild","insertScriptTag","dataLayer","getOrCreateDataLayer","this","fid","label","getId","sent","Date","update","initializeGAId","logEvent","eventName","eventParams","gtagFunction","params","global","_logEvent","setCurrentScreen","screenName","_setCurrentScreen","setUserId","_setUserId","setUserProperties","properties","flatProperties","keys","key","_setUserProperties","setAnalyticsCollectionEnabled","enabled","_setAnalyticsCollectionEnabled","instance","isSupported","trys","INTERNAL","registerComponent","container","getProvider","getImmediate","setServiceProps","reason","registerVersion"],"mappings":"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","file":"static/js/9.90b5cae8.chunk.js","sourcesContent":["import { __assign, __awaiter, __generator } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ANALYTICS_ID_FIELD = 'measurementId'; // Key to attach FID to in gtag params.\n\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\n\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /** @deprecated */\n\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nfunction _logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {\n  var params = eventParams || {};\n\n  if (!options || !options.global) {\n    params = __assign(__assign({}, eventParams), {\n      'send_to': analyticsId\n    });\n  } // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n} // TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction _setCurrentScreen(gtagFunction, analyticsId, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'screen_name': screenName\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction _setUserId(gtagFunction, analyticsId, id, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'user_id': id\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction _setUserProperties(gtagFunction, analyticsId, properties, options) {\n  if (options && options.global) {\n    var flatProperties = {};\n\n    for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n      var key = _a[_i]; // use dot notation for merge behavior in gtag.js\n\n      flatProperties[\"user_properties.\" + key] = properties[key];\n    }\n\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction _setAnalyticsCollectionEnabled(analyticsId, enabled) {\n  window[\"ga-disable-\" + analyticsId] = !enabled;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n */\n\nfunction initializeGAId(app, installations, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fid;\n\n    var _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , installations.getId()];\n\n        case 1:\n          fid = _b.sent(); // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          gtagCore('js', new Date()); // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n\n          gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {}, _a[GA_FID_KEY] = fid, // guard against developers accidentally setting properties with prefix `firebase_`\n          _a[ORIGIN_KEY] = 'firebase', _a.update = true, _a));\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/** Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer\r\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\r\n */\n\n\nfunction wrapGtag(gtagCore, initializedIdPromisesMap) {\n  return function (command, idOrNameOrParams, gtagParams) {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      var initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n\n      if (gtagParams && gtagParams['send_to']) {\n        var gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n\n        for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n          var sendToId = gaSendToList_1[_i];\n          var initializationPromise = initializedIdPromisesMap[sendToId]; // Groups will not be in the map.\n\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      } // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n\n\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {\n          var idPromise = _b[_a];\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      } // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n\n\n      Promise.all(initializationPromisesToWaitFor) // Workaround for http://b/141370449 - third argument cannot be undefined.\n      .then(function () {\n        return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else if (command === GtagCommand.CONFIG) {\n      var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] || Promise.resolve();\n      initializationPromiseToWait.then(function () {\n        gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams);\n    }\n  };\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\r\n */\n\n\nfunction wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Must push IArguments object, not an array.\n\n\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"no-ga-id\"\n/* NO_GA_ID */\n] = \"\\\"\" + ANALYTICS_ID_FIELD + \"\\\" field is empty in \" + 'Firebase config. Firebase Analytics ' + 'requires this field to contain a valid measurement ID.', _a[\"already-exists\"\n/* ALREADY_EXISTS */\n] = 'A Firebase Analytics instance with the measurement ID ${id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each measurement ID.', _a[\"already-initialized\"\n/* ALREADY_INITIALIZED */\n] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\"\n/* INTEROP_COMPONENT_REG_FAILED */\n] = 'Firebase Analytics Interop Component failed to instantiate', _a[\"indexedDB-unsupported\"\n/* INDEXED_DB_UNSUPPORTED */\n] = 'IndexedDB is not supported by current browswer', _a[\"invalid-indexedDB-context\"\n/* INVALID_INDEXED_DB_CONTEXT */\n] = \"Environment doesn't support IndexedDB: {$errorInfo}. \" + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments', _a[\"cookies-not-enabled\"\n/* COOKIES_NOT_ENABLED */\n] = 'Cookies are not enabled in this browser environment. Analytics requires cookies to be enabled.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Maps gaId to FID fetch promises.\r\n */\n\nvar initializedIdPromisesMap = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\n\nfunction resetGlobalVars(newGlobalInitDone, newGaInitializedPromise) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n\n  if (newGaInitializedPromise === void 0) {\n    newGaInitializedPromise = {};\n  }\n\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\n\n\nfunction getGlobalVars() {\n  return {\n    initializedIdPromisesMap: initializedIdPromisesMap\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\n\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nfunction factory(app, installations) {\n  if (!areCookiesEnabled()) {\n    throw ERROR_FACTORY.create(\"cookies-not-enabled\"\n    /* COOKIES_NOT_ENABLED */\n    );\n  }\n\n  if (!isIndexedDBAvailable()) {\n    throw ERROR_FACTORY.create(\"indexedDB-unsupported\"\n    /* INDEXED_DB_UNSUPPORTED */\n    );\n  } // Async but non-blocking.\n\n\n  validateIndexedDBOpenable().catch(function (error) {\n    throw ERROR_FACTORY.create(\"invalid-indexedDB-context\"\n    /* INVALID_INDEXED_DB_CONTEXT */\n    , {\n      errorInfo: error\n    });\n  });\n  var analyticsId = app.options[ANALYTICS_ID_FIELD];\n\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(\"no-ga-id\"\n    /* NO_GA_ID */\n    );\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n\n    getOrCreateDataLayer(dataLayerName);\n\n    var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName),\n        wrappedGtag = _a.wrappedGtag,\n        gtagCore = _a.gtagCore;\n\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n\n\n  initializedIdPromisesMap[analyticsId] = initializeGAId(app, installations, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    logEvent: function logEvent(eventName, eventParams, options) {\n      return _logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);\n    },\n    setCurrentScreen: function setCurrentScreen(screenName, options) {\n      return _setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);\n    },\n    setUserId: function setUserId(id, options) {\n      return _setUserId(wrappedGtagFunction, analyticsId, id, options);\n    },\n    setUserProperties: function setUserProperties(properties, options) {\n      return _setUserProperties(wrappedGtagFunction, analyticsId, properties, options);\n    },\n    setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(enabled) {\n      return _setAnalyticsCollectionEnabled(analyticsId, enabled);\n    }\n  };\n  return analyticsInstance;\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.4.1\";\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nvar ANALYTICS_TYPE = 'analytics';\n\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  instance.registerVersion(name, version);\n\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics(firebase);\n/**\r\n * this is a public static method provided to users that wraps three different checks:\r\n *\r\n * 1. check if cookie is enabled in current browser.\r\n * 2. check if IndexedDB is supported by the browser environment.\r\n * 3. check if the current browser context is valid for using IndexedDB.\r\n */\n\nfunction isSupported() {\n  return __awaiter(this, void 0, void 0, function () {\n    var isDBOpenable, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!areCookiesEnabled()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!isIndexedDBAvailable()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , validateIndexedDBOpenable()];\n\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2\n          /*return*/\n          , isDBOpenable];\n\n        case 3:\n          error_1 = _a.sent();\n          return [2\n          /*return*/\n          , false];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };"],"sourceRoot":""}