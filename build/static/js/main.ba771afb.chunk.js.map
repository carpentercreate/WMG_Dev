{"version":3,"sources":["config.js","serviceWorker.js","Dashboard.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ThemeEditor","initial","color","group","primary","background","dark","darkPrimary","light","lightPrimary","muted","rest","theme","useFirestore","collection","doc","height","width","radius","style","cursor","whileHover","scale","shadow","onTap","set","Main","themeref","useFirestoreDocData","backgroundColor","direction","gap","alignment","map","v","key","whileTap","fontSize","overflow","center","currentPage","name","bottom","Dashboard","fallback","traceId","preloadData","firebaseApp","a","preloadUser","preloadFirestoreDoc","firestore","useFirebaseApp","Promise","all","preloadFirestore","setup","enablePersistence","preloadStorage","storage","setMaxUploadRetryTime","preloadAuth","preloadRemoteConfig","remoteConfig","settings","minimumFetchIntervalMillis","fetchTimeoutMillis","fetchAndActivate","preloadSDKs","rootElement","document","getElementById","ReactDOM","render","StrictMode","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fonts","font","weights","subsets","App","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba771afb.chunk.js","sourcesContent":["export const firebaseConfig = {\n\tapiKey: \"AIzaSyAsce1vZ82rHuTDHXlRE6wtOpeR8fo0vMM\",\n\tauthDomain: \"watershed-app.firebaseapp.com\",\n\tdatabaseURL: \"https://watershed-app.firebaseio.com\",\n\tprojectId: \"watershed-app\",\n\tstorageBucket: \"watershed-app.appspot.com\",\n\tmessagingSenderId: \"478129647871\",\n\tappId: \"1:478129647871:web:b3052cf16d07779fae9cca\",\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport {\n\tuseFirestore,\n\tSuspenseWithPerf,\n\t//useUser,\n\t//AuthCheck,\n\t//StorageImage,\n\tuseFirestoreDocData,\n\t//useFirestoreCollectionData,\n} from \"reactfire\";\nimport {Stack, Page, Frame} from \"framer\";\n//const red = \"#DC3F32\";\n//User\n//const User = ({id}) => {\n//\tconst db = useFirestore();\n//\tconst userref = db.collection(\"users\").doc(id);\n//\tconst profile = useFirestoreDocData(userref);\n\n//\treturn <>{id ? <h1>{profile.name}</h1> : <h4>no user</h4>}</>;\n//};\n\n//function Accounts({children}) {\n//\treturn <div className=\"Accounts\">{children}</div>;\n//}\n//function Reports({children}) {\n//\treturn <div className=\"Reports\">{children}</div>;\n//}\n//function Songs({children}) {\n//\treturn <div className=\"Songs\">{children}</div>;\n//}\n//function Journals({children}) {\n//\treturn <div className=\"Journals\">{children}</div>;\n//}\nfunction ThemeEditor({\n\tinitial = {\n\t\tcolor: {\n\t\t\tgroup: {\n\t\t\t\tprimary: {\n\t\t\t\t\tbackground: \"#DC3F32\",\n\t\t\t\t\tcolor: \"#000\",\n\t\t\t\t},\n\t\t\t\tdark: {\n\t\t\t\t\tbackground: \"#000\",\n\t\t\t\t\tcolor: \"#fff\",\n\t\t\t\t},\n\t\t\t\tdarkPrimary: {\n\t\t\t\t\tbackground: \"#000\",\n\t\t\t\t\tcolor: \"#DC3F32\",\n\t\t\t\t},\n\t\t\t\tlight: {\n\t\t\t\t\tbackground: \"#fff\",\n\t\t\t\t\tcolor: \"#000\",\n\t\t\t\t},\n\t\t\t\tlightPrimary: {\n\t\t\t\t\tbackground: \"#fff\",\n\t\t\t\t\tcolor: \"#DC3F32\",\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tbackground: \"lightgray\",\n\t\t\t\t\tcolor: \"black\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\t...rest\n}) {\n\tconst db = useFirestore();\n\tconst theme = db.collection(\"views\").doc(\"theme\");\n\treturn (\n\t\t<Frame\n\t\t\theight={40}\n\t\t\twidth={110}\n\t\t\tradius={4}\n\t\t\t{...initial.color.group.primary}\n\t\t\tstyle={{cursor: \"pointer\"}}\n\t\t\twhileHover={{scale: 1.1}}\n\t\t\tshadow={\"5px 15px 30px 0px rgba(0,0,0,.20)\"}\n\t\t\tonTap={theme.set(initial)}\n\t\t\t{...rest}>\n\t\t\tsetTheme\n\t\t</Frame>\n\t);\n}\nfunction Main() {\n\tconst db = useFirestore();\n\t//const user = useUser();\n\tconst themeref = db.collection(\"views\").doc(\"theme\");\n\tconst theme = useFirestoreDocData(themeref);\n\n\treturn (\n\t\t<Frame backgroundColor=\"white\" width=\"100vw\" height=\"100vh\">\n\t\t\t<Stack direction=\"horizontal\" gap={6} alignment=\"start\">\n\t\t\t\t{[\n\t\t\t\t\t\"GROSS INCOME\",\n\t\t\t\t\t\"TOP SOURCES\",\n\t\t\t\t\t\"TOP PROGRAMS\",\n\t\t\t\t\t\"TOP PROGRAMS\",\n\t\t\t\t\t\"TOP PROGRAMS\",\n\t\t\t\t\t\"TOP PROGRAMS\",\n\t\t\t\t\t\"TOP PROGRAMS\",\n\t\t\t\t].map((v) => (\n\t\t\t\t\t<Frame\n\t\t\t\t\t\tkey={v}\n\t\t\t\t\t\theight={40}\n\t\t\t\t\t\tradius={2}\n\t\t\t\t\t\twidth={110}\n\t\t\t\t\t\twhileTap={{\n\t\t\t\t\t\t\tscale: 0.95,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\twhileHover={{scale: 1.05}}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tfontSize: \".7em\",\n\t\t\t\t\t\t\tcursor: \"pointer\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t{...theme.color.group.primary}\n\t\t\t\t\t\tshadow=\"0px 24px 20px -10px rgba(0,0,0,.2)\">\n\t\t\t\t\t\t{v}\n\t\t\t\t\t</Frame>\n\t\t\t\t))}\n\t\t\t</Stack>\n\t\t\t<Page\n\t\t\t\toverflow=\"visible\"\n\t\t\t\tshadow=\"12px 30px 52px 0px rgba(0,0,0,.2)\"\n\t\t\t\tcenter\n\t\t\t\tradius={24}\n\t\t\t\tdirection=\"horizontal\"\n\t\t\t\tcurrentPage={0}>\n\t\t\t\t{[{name: \"Gross Income\"}, {name: \"Top Soures\"}, {name: \"Top\"}].map(\n\t\t\t\t\t(v) => (\n\t\t\t\t\t\t<Frame\n\t\t\t\t\t\t\tkey={v.name}\n\t\t\t\t\t\t\tbackgroundColor={\"white\"}\n\t\t\t\t\t\t\tshadow=\"5px 15px 50px 0px rgba(0,0,0,.3)\">\n\t\t\t\t\t\t\t{v.name}\n\t\t\t\t\t\t</Frame>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</Page>\n\t\t\t<ThemeEditor bottom={30} center=\"x\" />\n\t\t</Frame>\n\t);\n}\n\nexport function Dashboard() {\n\treturn (\n\t\t<>\n\t\t\t<SuspenseWithPerf fallback={\"loading\"} traceId={\"hello\"}>\n\t\t\t\t<Main />\n\t\t\t</SuspenseWithPerf>\n\t\t</>\n\t);\n}\n","import React from \"react\";\nimport {preloadFirestore} from \"reactfire\";\nimport {\n\tpreloadFirestoreDoc,\n\tuseFirebaseApp,\n\tpreloadUser,\n\tpreloadAuth,\n\tSuspenseWithPerf,\n\tpreloadStorage,\n\tpreloadRemoteConfig,\n} from \"reactfire\";\nimport {Dashboard} from \"./Dashboard\";\n\n// Our components will lazy load the\n// SDKs to decrease their bundle size.\n// Since we know that, we can start\n// fetching them now\nconst preloadSDKs = (firebaseApp) => {\n\treturn Promise.all([\n\t\tpreloadFirestore({\n\t\t\tfirebaseApp,\n\t\t\tsetup(firestore) {\n\t\t\t\treturn firestore().enablePersistence();\n\t\t\t},\n\t\t}),\n\t\tpreloadStorage({\n\t\t\tfirebaseApp,\n\t\t\tsetup(storage) {\n\t\t\t\treturn storage().setMaxUploadRetryTime(10000);\n\t\t\t},\n\t\t}),\n\t\tpreloadAuth({firebaseApp}),\n\t\tpreloadRemoteConfig({\n\t\t\tfirebaseApp,\n\t\t\tsetup(remoteConfig) {\n\t\t\t\tremoteConfig().settings = {\n\t\t\t\t\tminimumFetchIntervalMillis: 10000,\n\t\t\t\t\tfetchTimeoutMillis: 10000,\n\t\t\t\t};\n\t\t\t\treturn remoteConfig().fetchAndActivate();\n\t\t\t},\n\t\t}),\n\t]);\n};\n\nconst preloadData = async (firebaseApp) => {\n\tconst user = await preloadUser(firebaseApp);\n\n\tif (user) {\n\t\tpreloadFirestoreDoc(\n\t\t\t(firestore) => firestore.doc(\"styles/dashboard\"),\n\t\t\tfirebaseApp\n\t\t);\n\t}\n};\n\nexport default () => {\n\tconst firebaseApp = useFirebaseApp();\n\n\t// Kick off fetches for SDKs and data that\n\t// we know our components will eventually need.\n\t//\n\t// This is OPTIONAL but encouraged as part of the render-as-you-fetch pattern\n\t// https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\n\tpreloadSDKs(firebaseApp).then(preloadData(firebaseApp));\n\n\treturn (\n\t\t<SuspenseWithPerf fallback={\"loading\"} traceId={\"main-app\"}>\n\t\t\t<Dashboard />\n\t\t</SuspenseWithPerf>\n\t);\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {FirebaseAppProvider} from \"reactfire\";\nimport {firebaseConfig} from \"./config\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GoogleFontLoader from \"react-google-font-loader\";\n\nimport \"./styles.css\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<FirebaseAppProvider firebaseConfig={firebaseConfig}>\n\t\t\t<GoogleFontLoader\n\t\t\t\tfonts={[\n\t\t\t\t\t{\n\t\t\t\t\t\tfont: \"Roboto\",\n\t\t\t\t\t\tweights: [400, \"400i\"],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfont: \"Roboto Mono\",\n\t\t\t\t\t\tweights: [400, 700],\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tsubsets={[\"cyrillic-ext\", \"greek\"]}\n\t\t\t/>\n\t\t\t<App />\n\t\t</FirebaseAppProvider>\n\t</React.StrictMode>,\n\trootElement\n);\nserviceWorker.register();\n"],"sourceRoot":""}